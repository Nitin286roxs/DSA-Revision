# -*- coding: utf-8 -*-
"""1. Array Module

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10cz0ioPjAG1Y6homvsOGtEBV9Ps0sAh_

### **Other than some generic containers like lists, Python in its definition can also handle containers with specified data types. The array can be handled in Python by a module named “array“. They can be useful when we have to manipulate only specific data type values.**
"""

# importing "array" for array operations
import array

"""Operations on Array in Python
Below are some operations that can be performed in an array:

* append()
* insert()
* pop()
* remove()
* index()
* reverse()


"""

# prompt:

# Creating an array with integer type
# initializing an array with array values
# using array.array() method
array_num = array.array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9])

# printing original array
print("The original array is : " + str(array_num))

# using append() to insert value at end
array_num.append(10)

# printing result
print("The array after insertion : " + str(array_num))

# using insert() to insert value at specific position
array_num.insert(2, 12)

# printing result
print("The array after insertion at specific position : " + str(array_num))

# using pop() to remove element at end
array_num.pop()

# printing result
print("The array after popping element at end : " + str(array_num))

# using remove() to remove specific element
array_num.remove(12)

# printing result
print("The array after removing specific element : " + str(array_num))

# using index() to get index of element
res = array_num.index(5)

# printing result
print("The index of 5 is : " + str(res))

# using reverse() to reverse the order of elements
array_num.reverse()

# printing result
print("The array after reversing : " + str(array_num))

"""# Array itemsize Function

```
Type Code,C Type,Python Type,Minimum size in Bytes
‘b’,signed char,int,1
‘B’,unsigned char,int,1
‘u’,Py_UNICODE,Unicode character,4
‘h’,signed short,int,2
‘H’,unsigned short,int,2
‘i’,signed int,int,4
‘I’,unsigned int,int,4
‘l’,signed long,int,8
‘L’,unsigned long,int,8
‘q’,signed long long,int,8
‘Q’,unsigned long long,int,8
‘f’,float,float,4
‘d’,double,float,8
```
+
"""

# prompt:

import array

# Create an array with type code 'b' (signed char)
arr = array.array('b', [1, 2, 3, 4, 5])
# Print the array's item size in bytes
print(f"Item sizefor {arr.typecode} : {arr.itemsize}")



# Create an array with type code 'B' (Unsigned char)
arr = array.array('B', [1, 2, 3, 4, 5])
# Print the array's item size in bytes
print(f"Item size for {arr.typecode} : {arr.itemsize}")


# Create an array with type code 'B' (Unicode character)
arr= array.array('u',['a', 'b', 'c', 'c'])
# Print the array's item size in bytes
print(f"Item size for {arr.typecode} : {arr.itemsize}")


# Create an array with type code 'h' (signed sort)
arr = array.array('h', [1, 2, 3, 4, 5])
# Print the array's item size in bytes
print(f"Item size for {arr.typecode} : {arr.itemsize}")



# Create an array with type code 'H' (unsigned sort)
arr = array.array('H', [1, 2, 3, 4, 5])
# Print the array's item size in bytes
print(f"Item size for {arr.typecode} : {arr.itemsize}")



# Create an array with type code 'i' (signed int)
arr = array.array('i', [1, 2, 3, 4, 5])
# Print the array's item size in bytes
print(f"Item size for {arr.typecode} : {arr.itemsize}")



# Create an array with type code 'I' (unsigned int)
arr = array.array('I', [1, 2, 3, 4, 5])
# Print the array's item size in bytes
print(f"Item size for {arr.typecode} : {arr.itemsize}")



# Create an array with type code 'l' (signed long)
arr = array.array('l', [1, 2, 3, 4, 5])
# Print the array's item size in bytes
print(f"Item size for {arr.typecode} : {arr.itemsize}")


# Create an array with type code 'L' (unsigned long)
arr = array.array('L', [1, 2, 3, 4, 5])
# Print the array's item size in bytes
print(f"Item size for {arr.typecode} : {arr.itemsize}")


# Create an array with type code 'q' (signed long long)
arr = array.array('q', [1, 2, 3, 4, 5])
# Print the array's item size in bytes
print(f"Item size for {arr.typecode} : {arr.itemsize}")

# Create an array with type code 'Q' (unsigned long long)
arr = array.array('Q', [1, 2, 3, 4, 5])
# Print the array's item size in bytes
print(f"Item size for {arr.typecode} : {arr.itemsize}")

# Create an array with type code 'f' (float)
arr = array.array('f', [1, 2, 3, 4, 5])
# Print the array's item size in bytes
print(f"Item size for {arr.typecode} : {arr.itemsize}")

# Create an array with type code 'f' (double)
arr = array.array('d', [1, 2, 3, 4, 5])
# Print the array's item size in bytes
print(f"Item size for {arr.typecode} : {arr.itemsize}")

"""# Extend two arrays"""

arr1 = array.array('i', [1, 2, 3, 4, 5])
arr2 = array.array('i', [6, 7, 8, 9, 10])
arr1.extend(arr2)
print(arr1)

"""# Exend an array with list"""

# prompt:

import array

# Create an array with type code 'i' (signed int)
arr1 = array.array('i', [1, 2, 3, 4, 5])

# Create a list with some elements
list1 = [6, 7, 8, 9, 10]

# Extend the array with the list
arr1.fromlist(list1)

# Print the extended array
print(arr1)